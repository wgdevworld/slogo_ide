package slogo.model.commands.allcommands;

import slogo.controller.TurtleObserver;
import slogo.model.Turtle;
import slogo.model.commands.Commands;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class RandomRange extends Commands {

    private double min;
    private double max;
    private double value;

    /**
     * Constructs a new RandomRange object with default values.
     */
    public RandomRange() {
        min = 0;
        max = 0;
        value = 0;
    }

    /**
     * Constructs a new RandomRange object with the specified parameters.
     *
     * @param params a list of parameters for the "RandomRange" command
     */
    public RandomRange(List<String> params) {
        max = Double.parseDouble(params.get(0));
        value = randValue(min, max);
    }

    /**
     * Sets the behavior|values of the "RandomRange" command instance.
     *
     * @param paramList a list of parameters for the "RandomRange" command
     * @param turtle    the turtle object
     * @param listStack the stack of lists
     * @param observers the list of observers
     * @return the random value generated by the "RandomRange" command
     */
    @Override
    public double setBehavior(ArrayList<Double> paramList, Turtle turtle, Stack<ArrayList<String>> listStack, List<TurtleObserver> observers) {
        min = paramList.get(0);
        max = paramList.get(1);
        value = randValue(min, max);
        return value;
    }

    /**
     * Executes the "RandomRange" command.
     *
     * @param turtle the turtle object
     * @return the random value generated by the "RandomRange" command
     */
    @Override
    public double execute(Turtle turtle) {
        return value;
    }

    /**
     * Prepares the "RandomRange" command.
     *
     * @param commandString the string representation of the command
     */
    @Override
    public void prep(String commandString) {

    }

    /**
     * Generates a random value between a and b, inclusive.
     *
     * @param a the minimum value of the range
     * @param b the maximum value of the range
     * @return a random value between a and b, inclusive
     */
    private double randValue(double a, double b) {
        return Math.random() * (b - a + 1) + a;
    }
}
